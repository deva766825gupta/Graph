#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
    vector<int> parent;
    vector<int> rank;
    
    int find(int x) {
        if (x == parent[x]) 
            return x;
    
        return parent[x] = find(parent[x]);
    }

    void Union(int x, int y) {
        int x_parent = find(x);
        int y_parent = find(y);
    
        if (x_parent == y_parent) 
            return;
    
        if (rank[x_parent] > rank[y_parent]) {
            parent[y_parent] = x_parent;
        } else if (rank[x_parent] < rank[y_parent]) {
            parent[x_parent] = y_parent;
        } else {
            parent[x_parent] = y_parent;
            rank[y_parent]++;
        }
    }

    int kruskal(vector<vector<int>> &edges) {
        int sum = 0;
        for (auto &temp : edges) {
            int wt = temp[0];
            int u = temp[1];
            int v = temp[2];
            int p_u = find(u);
            int p_v = find(v);
            if (p_u != p_v) {
                Union(u, v);
                sum += wt;
            }
        }
        return sum;
    }

    // Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[]) {
        // Initialize parent and rank vectors
        parent.resize(V);
        rank.resize(V, 0);
        for (int i = 0; i < V; i++) {
            parent[i] = i;
        }
        
        vector<vector<int>> edges;
        for (int i = 0; i < V; i++) {
            for (auto it : adj[i]) {
                int u = i;
                int v = it[0];
                int wt = it[1];
                edges.push_back({wt, u, v});
            }
        }
        
        sort(edges.begin(), edges.end());
        return kruskal(edges);
    }
};
