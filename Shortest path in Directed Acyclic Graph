 vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
          vector<vector<pair<int, int>>>adj(N);
        for(auto it: edges){
            adj[it[0]].push_back({it[1], it[2]});
        }
        
        
        int src =0;
        vector<int>dist(N, INT_MAX);
        queue<pair<int, int>>q;
        q.push({src,0});
        dist[src] =0;
        
        while(!q.empty()){
            int node = q.front().first;
            int path = q.front().second;
            q.pop();
            
            for(auto i: adj[node]){
                int val = i.first;
                int wt = i.second;
                if(path+wt < dist[val]){
                    dist[val] = path+wt;
                    q.push({val,path+wt});
                }
            }
        }
        
        for(int i=0; i<N; i++){
            if(dist[i]==INT_MAX) dist[i] = -1;
        }
        
        return dist;
        
        
    }
