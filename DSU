int find(int A[],int X)
{
       //add code here
       if(X==A[X])
       {
           return X;
       }
       return A[X]=find(A,A[X]);
}
void unionSet(int A[],int X,int Z)
{
	//add code here.
		//add code here.
	int ulp_X = find(A,X); // ultimate parent of the X
	int ulp_Z = find(A,Z); // ultimate parent of the Z
	A[ulp_X] = ulp_Z;
}
//Using Rank 
class DisjointSet {
    vector<int> rank, parent;
public:
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }
};
