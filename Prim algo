#include <vector>
#include <queue>
using namespace std;

int spanningTree(int V, vector<vector<int>> adj[]) {
    // Priority queue to store {weight, node} and retrieve the smallest weight edge
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    // Visited array to keep track of visited nodes
    vector<int> vis(V, 0);

    // Push the initial node (0) with weight 0 into the priority queue
    pq.push({0, 0});
    int sum = 0;

    // Run the loop until the priority queue is empty
    while (!pq.empty()) {
        // Extract the node with the minimum weight
        auto it = pq.top();
        pq.pop();
        int node = it.second;
        int wt = it.first;

        // If the node is already visited, skip it
        if (vis[node] == 1) continue;

        // Mark the node as visited and add its weight to the sum
        vis[node] = 1;
        sum += wt;

        // Traverse all adjacent nodes
        for (auto it : adj[node]) {
            int adjNode = it[0];
            int edW = it[1];

            // If the adjacent node is not visited, push it into the priority queue
            if (!vis[adjNode]) {
                pq.push({edW, adjNode});
            }
        }
    }

    // Return the total weight of the minimum spanning tree
    return sum;
}


